// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	event "maunium.net/go/mautrix/event"
	id "maunium.net/go/mautrix/id"

	mautrix "maunium.net/go/mautrix"

	mock "github.com/stretchr/testify/mock"
)

// MautrixClient is an autogenerated mock type for the MautrixClient type
type MautrixClient struct {
	mock.Mock
}

// SendMessageEvent provides a mock function with given fields: ctx, roomID, eventType, contentJSON, extra
func (_m *MautrixClient) SendMessageEvent(ctx context.Context, roomID id.RoomID, eventType event.Type, contentJSON interface{}, extra ...mautrix.ReqSendEvent) (*mautrix.RespSendEvent, error) {
	_va := make([]interface{}, len(extra))
	for _i := range extra {
		_va[_i] = extra[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, roomID, eventType, contentJSON)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendMessageEvent")
	}

	var r0 *mautrix.RespSendEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, id.RoomID, event.Type, interface{}, ...mautrix.ReqSendEvent) (*mautrix.RespSendEvent, error)); ok {
		return rf(ctx, roomID, eventType, contentJSON, extra...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, id.RoomID, event.Type, interface{}, ...mautrix.ReqSendEvent) *mautrix.RespSendEvent); ok {
		r0 = rf(ctx, roomID, eventType, contentJSON, extra...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mautrix.RespSendEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, id.RoomID, event.Type, interface{}, ...mautrix.ReqSendEvent) error); ok {
		r1 = rf(ctx, roomID, eventType, contentJSON, extra...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMautrixClient creates a new instance of MautrixClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMautrixClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MautrixClient {
	mock := &MautrixClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
